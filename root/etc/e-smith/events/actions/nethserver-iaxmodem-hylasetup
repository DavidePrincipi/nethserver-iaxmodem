#!/usr/bin/perl

#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use esmith::DB::db;
use esmith::templates;
use File::Basename;
use strict;

my $modemsDb = esmith::DB::db->open('modems') || die("Could not open destination modems db\n");

# cleanup hylafax modem configuration files
my @hyla_configs =glob("/var/spool/hylafax/etc/config.ttyIAX*");
unlink @hyla_configs;

# stop all faxgetty-ttyIAX* services and remove relative files
my @files = <"/usr/lib/systemd/system/hylafax-faxgetty\@ttyIAX*.service">;
foreach my $file (@files) {
   my @tmp = split(/\./,basename($file));
   system("/usr/bin/systemctl stop ".$tmp[0]);
   unlink($file);
}

foreach my $modem ($modemsDb->get_all_by_prop('type' => 'iax')) {
    my $peername = $modem->prop('extension') || "";
    my $cidName = $modem->prop('cidName') || "";
    my $cidNumber = $modem->prop('cidNumber') || "";
    my $mode = $modem->prop('mode') || "";
    next unless ($peername ne "");
    generate_hylafax_conf($peername,$cidName,$cidNumber,$mode);
    generate_faxgetty_conf($peername);
}

sub generate_faxgetty_conf()
{
    
    my $FaxDevice = shift;   
    $FaxDevice = "ttyIAX" . $FaxDevice;
    my $job_file="/usr/lib/systemd/system/hylafax-faxgetty@".$FaxDevice.".service";
    system("sed '/^After/d' /usr/lib/systemd/system/hylafax-faxgetty@.service > $job_file");
    system("/usr/bin/systemctl daemon-reload");
    # start and enable new job file
    system("/usr/bin/systemctl enable hylafax-faxgetty@".$FaxDevice);
    system("/usr/bin/systemctl start hylafax-faxgetty@".$FaxDevice);
}

# Create Hylafax configuration file
sub generate_hylafax_conf()
{
    my $peername = shift;   
    my $cidName = shift;
    my $cidNumber = shift;
    my $mode = shift;
    my $file = "/var/spool/hylafax/etc/config.ttyIAX$peername";
    my $recipients = esmith::templates::processTemplate({
        'TEMPLATE_PATH' => '/var/spool/hylafax/etc/config.nethesis',
        'OUTPUT_FILENAME' => $file
    });
    
    open MODEM, ">>$file" or die "Cannot create file: $file\n";
    print MODEM <<END
ModemType:              Class1      # use this to supply a hint

ModemResetCmds:         "ATH1\\nAT+VCID=1"
ModemReadyCmds:         ATH0

# Enabling this will use the hfaxd-protocol to set Caller*ID
#
ModemSetOriginCmd:     AT+VSID="%s","%d"

Class1AdaptRecvCmd:     AT+FAR=1
Class1TMConnectDelay:   400     # counteract quick CONNECT response

#
# If you have trouble with V.17 receiving or sending,
# you may want to enable one of these, respectively.
#
#Class1RMQueryCmd:      "!24,48,72,96"  # enable this to disable V.17 receiving
#Class1TMQueryCmd:      "!24,48,72,96"  # enable this to disable V.17 sending

#
# The pty does not support changing parity.
#
PagerTTYParity:		none

# Uncomment DATE and TIME if you really want them, but you probably don't.
#CallIDPattern:          "DATE="
#CallIDPattern:          "TIME="
CallIDPattern:          "NMBR="
CallIDPattern:          "NAME="
CallIDPattern:		"ANID="
#CallIDPattern:          "USER="	# username provided by call
#CallIDPattern:          "PASS="	# password provided by call
#CallIDPattern:          "CDID="	# DID context in call
CallIDPattern:          "NDID="
#CallIDAnswerLength:	4

END
;

    close MODEM;
    if ($cidName ne ''){
        system("/bin/sed -i 's/^LocalIdentifier:.*\$/LocalIdentifier:    \"$cidName\"/g' $file");
        system("/bin/sed -i 's/^FaxName:.*\$/FaxName:    \"$cidName\"/g' $file");
    }
    if ($cidNumber ne ''){
        system("/bin/sed -i 's/^FAXNumber:.*\$/FAXNumber:    $cidNumber/g' $file");
    }   
    #if modem is receive only
    if ($mode eq "receive" ){
        #Receive only modem
        open(my $fh, '>>', $file) or die "Could not open file '$file' $!";
        print $fh "ModemReadyState:        D\n";
	close $fh;
    } elsif ($mode eq "send" ){
	#Send only modem
        system("/bin/sed -i 's/^RingsBeforeAnswer:.*\$/RingsBeforeAnswer:    0/g' $file");
    } 
}

exit 0;

